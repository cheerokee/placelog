<?php

namespace Register\Controller;

use Base\Controller\CrudController;
use Register\Entity\PersonRole;

class BankAccountController extends CrudController{
    public function __construct() {
        $this->title = $this->translate("Contas");
        $this->table = 'BankAccount';
        $this->entity = 'Register\Entity\\'.$this->table ;
        $this->service = 'Register\Service\\'.$this->table ;
        $this->form = 'Register\Form\\'.$this->table ;
        $this->controller = "bank-account";
        $this->route = "bank-account/default";

        $this->_listView = array(
            'title' => $this->title,
            'icon' => 'fa fa-fw fa-file-text',
            'route' => $this->route,
            'controller' => $this->controller,
            'actions' => array(
                'enable' =>true,
                'defaults' => array(
                    'edit' => array(
                        'enable' => true,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-edit'
                    ),
                    'delete' => array(
                        'enable' => true,
                        'class' => 'btn btn-danger decision',
                        'icon' => 'fa fa-trash'
                    ),
                    'view' => array(
                        'enable' => false,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-eye'
                    ),
                ),
            ),
            'fields' => array(
                'id'=>array(
                    'label' => $this->translate('Id'),
                    'list' => true,
                ),
                'user'=>array(
                    'label' => $this->translate('UsuÃ¡rio'),
                    'list' => true,
                ),
                'banco'=>array(
                    'label' => $this->translate('Banco'),
                    'list' => true,
                ),
                'agencia'=>array(
                    'label' => $this->translate('AgÃªncia'),
                    'list' => true,
                ),
                'conta'=>array(
                    'label' => $this->translate('Conta'),
                    'list' => true,
                ),
                'tipo'=>array(
                    'label' => $this->translate('Tipo'),
                    'list' => true,
                )
            )
        );
    }

    public function indexAction()
    {
        return parent::indexAction(); // TODO: Change the autogenerated stub
    }

    public function newAction($request = null)
    {
        $request = $this->getRequest();
        if($request->isPost()) {
            $data = $request->getPost()->toArray();
            if($data['ativo']=='1'){
                $bankAccounts = $this->getEm()->getRepository('Register\Entity\BankAccount')->findBy(array(
                    'person' => $data['person'],
                    'ativo' => '1'
                ));

                if(count($bankAccounts)==1){
                    $this->flashMessenger()->addErrorMessage($this->translate("VocÃª nao pode ter mais do que uma conta bancÃ¡ria cadastrada"));
                    return $this->redirect()->toRoute('admin');
                }

                if(!empty($bankAccounts)){
                    foreach($bankAccounts as $bank_account){
                        $bank_account->setAtivo(0);

                        $this->getEm()->persist($bank_account);
                        $this->getEm()->flush();
                    }
                }
            }
        }
        return parent::newAction($request);
    }

    public function editAction($request = null)
    {
        $request = $this->getRequest();
        if($request->isPost()) {
            $data = $request->getPost()->toArray();
            if($data['ativo']=='1'){
                $bankAccounts = $this->getEm()->getRepository('Register\Entity\BankAccount')->findBy(array(
                    'person' => $data['person'],
                    'ativo' => '1'
                ));

                if(!empty($bankAccounts)){
                    foreach($bankAccounts as $bank_account){
                        $bank_account->setAtivo(0);

                        $this->getEm()->persist($bank_account);
                        $this->getEm()->flush();
                    }
                }
            }
        }
        return parent::editAction($request);
    }

    public function ativarAction(){
        $id = $this->params()->fromRoute('id',0);
        $bankAccount = $this->getEm()->getRepository('Register\Entity\BankAccount')->findOneById($id);

        $contasAtivadas = $this->getEm()->getRepository('Register\Entity\BankAccount')->findBy(array(
            'ativo' => true,
            'person' => $bankAccount->getPerson()
        ));
        if(!empty($contasAtivadas)){
            foreach($contasAtivadas as $contaAtivada){
                $contaAtivada->setAtivo(false);
                $this->getEm()->persist($contaAtivada);
                $this->getEm()->flush();
            }
        }

        $bankAccount->setAtivo(1);
        $this->getEm()->persist($bankAccount);
        $this->getEm()->flush();
        $this->flashMessenger()->addSuccessMessage($this->translate('Conta Ativada com sucesso!'));
        return $this->redirect()->toRoute('person/default',array('id' => $id));
    }
}