<?php

namespace Register\Controller;

use Register\Entity\PersonProfile;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;
use Base\Controller\CrudController;
use Zend\Paginator\Adapter\ArrayAdapter;
use Zend\Paginator\Paginator;

class PersonController extends CrudController
{
    protected $route;

    public function __construct() 
    {
        $this->title = "Usuário";

        $this->table = 'person';
        $this->entity = 'Register\Entity\\'.$this->table ;
        $this->service = 'Register\Service\\'.$this->table ;
        $this->form = 'Register\Form\\'.$this->table ;
        $this->controller = "person";
        $this->route = "person/default";

        $this->_listView = array(
            'title' => $this->title,
            'icon' => 'fa-share-alt-square',
            'route' => $this->route,
            'controller' => $this->controller,
            'actions' => array(
                'enable' =>true,
                'customs' => array(
                    'images' => array(
                        'rota' => 'person/default',
                        'controller' => 'person',
                        'action' => 'images',
                        'title' => 'Imagens do Usuário',
                        'enable' => true,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-image',
                        'group' => false,
                    ),
                    'permissions' => array(
                        'rota' => 'person-profile',
                        'title' => 'Perfil',
                        'enable' => false,
                        'class' => 'btn btn-warning',
                        'icon' => 'fa fa-list',
                        'group' => false,
                    ),
                ),
                'defaults' => array(
                    'edit' => array(
                        'enable' => true,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-edit'
                    ),
                    'delete' => array(
                        'enable' => true,
                        'class' => 'btn btn-danger decision',
                        'icon' => 'fa fa-trash'
                    ),
                    'view' => array(
                        'enable' => false,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-eye'
                    ),
                ),
            ),
            'fields' => array(
                'id'=>array(
                    'label' => 'Id',
                    'list' => true,
                ),
                'name'=>array(
                    'label' => 'Nome',
                    'list' => true,
                ),
                'email'=>array(
                    'label' => 'E-mail',
                    'list' => true,
                ),
                'image'=>array(
                    'label' => 'Imagem',
                    'list' => true,
                ),
            ),
        );
    }

    public function  indexAction($list = null)
    {
        return parent::indexAction($list); // TODO: Change the autogenerated stub
    }

    public function teacherAction(){
        $em = $this->getEm();
        $list = $em->getRepository('Register\Entity\Person')->getByProfile('teacher');

        return parent::indexAction($list);
    }

    public function editAction($request = null)
    {
        return parent::editAction($request); // TODO: Change the autogenerated stub
    }

    public function newAction($request = null)
    {
        return parent::newAction($request); // TODO: Change the autogenerated stub
    }

    public function profileAction(){
        $em = $this->getEm();
        $person = $em->getRepository('Register\Entity\Person')->findOneById($this->params()->fromRoute('id'));
        $personProfiles = $em->getRepository('Register\Entity\PersonProfile')->findBy(array('person'=>$person));

        if(isset($personProfiles)){
            foreach ($personProfiles as $personProfile){
                $personprofiles[] = $personProfile->getProfile();
            }
        }

        $profiles = $em->getRepository('Register\Entity\Profile')->findAll();

        $request = $this->getRequest();

        if($request->isPost()){
            $post = $request->getPost()->toArray();

            #Retirar todas as permissões
            $permissoes = $this->em->getRepository('Register\Entity\PersonProfile')->findBy(array('person'=>$person));
            
            foreach($permissoes as $permissao){
                $this->em->remove($permissao);
                $this->em->flush();
            }

            if(!empty($post['profiles'])) {
                foreach ($post['profiles'] as $perfilId) {
                    $profile = $em->getRepository('Register\Entity\Profile')->findOneById($perfilId);

                    $personProfile = $this->em->getRepository('Register\Entity\PersonProfile')->findOneBy(array('profile' => $profile, 'person' => $person));

                    if ($personProfile == null) {
                        $personProfile = new PersonProfile();
                        $personProfile->setProfile($profile);
                        $personProfile->setPerson($person);

                        $this->em->persist($personProfile);
                        $this->em->flush();
                    }
                }
            }

            $this->flashmessenger()->addSuccessMessage("Registro salvo com sucesso!");
            return $this->redirect()->toRoute('person/default',array('controller'=>'person'));
        }

        return new ViewModel(array(
            'person'=>$person,
            'profiles'=>$profiles,
            'personProfiles'=>$personProfiles
        ));
    }

    public function activeAction(){
        /**
         * @var Person $person
         */
        $person = $this->getEm()->getRepository('Register\Entity\Person')->findOneById($this->params()->fromRoute('id'));
        $activateKey = $person->getActivationKey();
    
        $personService = $this->getServiceLocator()->get('Register\Service\Person');

        $result = $personService->activate($activateKey);
        //Result quando tem o valor é um usuario
        if($result){
            $this->flashmessenger()->addSuccessMessage("Usuário ativado com sucesso!");
            return $this->redirect()->toRoute('admin/default',array('controller'=>'person'));
    
        }else{
            $this->flashmessenger()->addErrorMessage("Houve um erro na ativação do usuário");
            return $this->redirect()->toRoute('admin/default',array('controller'=>'person'));
        }
    }
    
    public function deactiveAction(){
        /**
         * @var Person $person
         */
        $person = $this->getEm()->getRepository('Register\Entity\Person')->findOneById($this->params()->fromRoute('id'));
        $person->setActive(null);
        $this->em->persist($person);
        $this->em->flush();
    
        $this->flashmessenger()->addMessage("Usuário foi desativado com sucesso!");
        return $this->redirect()->toRoute('admin/default',array('controller'=>'person'));
    }

    public function imagesAction(){
        $em = $this->getEm();
        $db_entity = $em->getRepository($this->entity)->findOneById($this->params()->fromRoute('id',0));
        $data_page = array(
            'title' => "Imagens do Usuário"
        );
        $request = $this->getRequest();
        if($request->isPost())
        {
            $data = $request->getPost()->toArray();
        }

        return new ViewModel(array(
            'em' => $em,
            'entity' => $db_entity,
            'db_person' => $db_entity,
            'data_page' => $data_page,
            'controller' => $this->controller,
            'id' => $this->params()->fromRoute('id',0),
        ));
    }
}
