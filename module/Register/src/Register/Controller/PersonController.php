<?php

namespace Register\Controller;

use Register\Entity\Person;
use Register\Entity\PersonRole;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;
use Base\Controller\CrudController;
use Zend\Paginator\Adapter\ArrayAdapter;
use Zend\Paginator\Paginator;

class PersonController extends CrudController
{
    protected $route;

    public function __construct() 
    {
        $this->table = 'person';
        $this->entity = 'Register\Entity\Person' ;
        $this->service = 'Register\Service\\'.$this->table ;
        $this->form = 'Register\Form\\'.$this->table ;
        $this->controller = "person";
        $this->route = "person/default";

        $this->title = "Usuário";

        $this->_listView = array(
            'title' => $this->title,
            'icon' => 'fa-fw fa fa-user',
            'route' => $this->route,
            'controller' => $this->controller,
            'actions' => array(
                'enable' =>true,
                'customs' => array(
                    'permissions' => array(
                        'rota' => 'person-role',
                        'title' => 'Perfil',
                        'enable' => false,
                        'class' => 'btn btn-warning',
                        'icon' => 'fa fa-list',
                        'group' => false,
                    ),
                ),
                'defaults' => array(
                    'edit' => array(
                        'enable' => true,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-edit'
                    ),
                    'delete' => array(
                        'enable' => true,
                        'class' => 'btn btn-danger decision',
                        'icon' => 'fa fa-trash'
                    ),
                    'view' => array(
                        'enable' => false,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-eye'
                    ),
                ),
            ),
            'fields' => array(
                'id'=>array(
                    'label' => 'Id',
                    'list' => true,
                ),
                'name'=>array(
                    'label' => 'Nome',
                    'list' => true,
                ),
                'email'=>array(
                    'label' => 'E-mail',
                    'list' => true,
                ),
                'document' => array(
                    'label' => 'Documento',
                    'list' => true
                )
            ),
            'filters' => array(
                'name' => array(
                    'label'     => 'Nome',
                    'type'      => 'autocomplete',
                    'column'    => 'col-md-12'
                ),
                'email' => array(
                    'label'     => 'E-mail',
                    'type'      => 'texto',
                    'strategy'  => 'like', //exact
                    'column'    => 'col-md-12'
                ),
                'type_person' => array(
                    'label'     => 'Tipo de Pessoa',
                    'type'      => 'select',
                    'column'    => 'col-md-12',
                ),
                'document' => array(
                    'label'     => 'Documento',
                    'type'      => 'custom',
                    'column'    => 'col-md-12',
                ),
                'active' => array(
                    'label'     => 'Ativo',
                    'type'      => 'custom',
                    'column'    => 'col-md-12',
                )
            )
        );
    }

    public function  indexAction($list = null)
    {
        return parent::indexAction($list); // TODO: Change the autogenerated stub
    }

    public function customerAction($list = null){
        $em = $this->getEm();

        $profile_key = "customer";
        $this->_listView['title'] = "Clientes";
        $this->_listView['controller'] = $profile_key;

        $allowed = $this->isAllow('Cliente','Visualizar');

        if($allowed){
            return parent::indexAction($list);
        }else{
            return $this->redirect()->toRoute('not-have-permission');
        }
    }

    public function editAction($request = null)
    {
        $request = $this->getRequest();

        $redirect = null;

        if($request->isPost()){

            $data       = $request->getPost();
            $data_arr   = $data->toArray();

            $data->fromArray($data_arr);

            $request->setPost($data);

            $redirect = $this->redirect()->toRoute('person/default', array(
                'controller' => $this->controller,
                'action' => $data_arr['action']
            ));
        }

        return parent::editAction($request,null,$redirect); // TODO: Change the autogenerated stub
    }

    public function newAction($request = null)
    {
        $request = $this->getRequest();

        $db_login = $this->getEm()->getRepository('Register\Entity\Person')->findOneById($this->getLogin());
        $redirect = null;
        if($request->isPost()){
            $data = $request->getPost();
            $data_arr = $data->toArray();

            $data->fromArray($data_arr);

            $request->setPost($data);

            $redirect = $this->redirect()->toRoute('person/default',array(
                'controller' => $this->controller,
                'action' => $data_arr['action']
            ));

        }

        return parent::newAction($request,null,$redirect); // TODO: Change the autogenerated stub
    }

    public function profileAction(){
        $request = $this->getRequest();
        $em = $this->getEm();

        $db_person              = $em->getRepository('Register\Entity\Person')->findOneById($this->params()->fromRoute('id'));
        $db_roles               = $em->getRepository('Acl\Entity\Role')->findAll();
        $db_person_roles     = $em->getRepository('Register\Entity\PersonRole')->findBy(array('person'=>$db_person));

        if($request->isPost()){
            $post = $request->getPost()->toArray();

            foreach($db_person_roles as $db_person_role){
                $this->em->remove($db_person_role);
                $this->em->flush();
            }

            if(!empty($post['roles'])) {
                foreach ($post['roles'] as $role) {
                    $db_role = $em->getRepository('Acl\Entity\Role')->findOneById($role);

                    $db_person_role = new PersonRole();

                    $db_person_role->setRole($db_role);
                    $db_person_role->setPerson($db_person);

                    $this->em->persist($db_person_role);
                }

                $this->em->flush();
            }

            $this->flashmessenger()->addSuccessMessage("Registro salvo com sucesso!");
            return $this->redirect()->toRoute('person/default',array('controller'=>'person'));
        }

        $allowed = $this->isAllow($this->title,'Perfil');

        if($allowed){
            return new ViewModel(array(
                'db_person'            =>  $db_person,
                'db_roles'             =>  $db_roles,
                'db_person_roles'      =>  $db_person_roles
            ));
        }else{
            return $this->redirect()->toRoute('not-have-permission');
        }
    }

    public function activeAction(){
        /**
         * @var Person $person
         */
        $person = $this->getEm()->getRepository('Register\Entity\Person')->findOneById($this->params()->fromRoute('id'));
        $activateKey = $person->getActivationKey();
    
        $personService = $this->getServiceLocator()->get('Register\Service\Person');

        $result = $personService->activate($activateKey);
        //Result quando tem o valor é um usuario
        if($result){
            $this->flashmessenger()->addSuccessMessage("Usuário ativado com sucesso!");
            return $this->redirect()->toRoute('admin/default',array('controller'=>'person'));
    
        }else{
            $this->flashmessenger()->addErrorMessage("Houve um erro na ativação do usuário");
            return $this->redirect()->toRoute('admin/default',array('controller'=>'person'));
        }
    }
    
    public function deactiveAction(){
        /**
         * @var Person $person
         */
        $person = $this->getEm()->getRepository('Register\Entity\Person')->findOneById($this->params()->fromRoute('id'));
        $person->setActive(null);
        $this->em->persist($person);
        $this->em->flush();
    
        $this->flashmessenger()->addMessage("Usuário foi desativado com sucesso!");
        return $this->redirect()->toRoute('admin/default',array('controller'=>'person'));
    }
}
