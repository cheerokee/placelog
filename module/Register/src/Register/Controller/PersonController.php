<?php

namespace Register\Controller;

use Register\Entity\Person;
use Register\Entity\PersonProfile;
use Register\Entity\Profile;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;
use Base\Controller\CrudController;
use Zend\Paginator\Adapter\ArrayAdapter;
use Zend\Paginator\Paginator;

class PersonController extends CrudController
{
    protected $route;

    public function __construct() 
    {
        $this->table = 'person';
        $this->entity = 'Register\Entity\Person' ;
        $this->service = 'Register\Service\\'.$this->table ;
        $this->form = 'Register\Form\\'.$this->table ;
        $this->controller = "person";
        $this->route = "person/default";

        $this->title = "Usuário";

        $this->_listView = array(
            'title' => $this->title,
            'icon' => 'fa-share-alt-square',
            'route' => $this->route,
            'controller' => $this->controller,
            'actions' => array(
                'enable' =>true,
                'customs' => array(
                    'permissions' => array(
                        'rota' => 'person-profile',
                        'title' => 'Perfil',
                        'enable' => false,
                        'class' => 'btn btn-warning',
                        'icon' => 'fa fa-list',
                        'group' => false,
                    ),
                ),
                'defaults' => array(
                    'edit' => array(
                        'enable' => true,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-edit'
                    ),
                    'delete' => array(
                        'enable' => true,
                        'class' => 'btn btn-danger decision',
                        'icon' => 'fa fa-trash'
                    ),
                    'view' => array(
                        'enable' => false,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-eye'
                    ),
                ),
            ),
            'fields' => array(
                'id'=>array(
                    'label' => 'Id',
                    'list' => true,
                ),
                'name'=>array(
                    'label' => 'Nome',
                    'list' => true,
                ),
                'email'=>array(
                    'label' => 'E-mail',
                    'list' => true,
                ),
                'document' => array(
                    'label' => 'Documento',
                    'list' => true
                )
            ),
            'filters' => array(
                'name' => array(
                    'label'     => 'Nome',
                    'type'      => 'autocomplete',
                    'column'    => 'col-md-12'
                ),
                'email' => array(
                    'label'     => 'E-mail',
                    'type'      => 'texto',
                    'strategy'  => 'like', //exact
                    'column'    => 'col-md-12'
                ),
                'type_person' => array(
                    'label'     => 'Tipo de Pessoa',
                    'type'      => 'select',
                    'column'    => 'col-md-12',
                ),
                'document' => array(
                    'label'     => 'Documento',
                    'type'      => 'custom',
                    'column'    => 'col-md-12',
                ),
                'active' => array(
                    'label'     => 'Ativo',
                    'type'      => 'custom',
                    'column'    => 'col-md-12',
                )
            )
        );
    }

    public function  indexAction($list = null)
    {
        return parent::indexAction($list); // TODO: Change the autogenerated stub
    }

    public function administratorAction(){
        $allowed_profiles = array();

        $allowed = $this->allowed($allowed_profiles);

        $profile_key = "administrator";

        $this->_listView['title'] = "Administradores";
        $this->_listView['controller'] = $profile_key;

        $em = $this->getEm();

        if($allowed){
            $list = $em->getRepository('Register\Entity\Person')->getByProfile($profile_key);

            if(!$list){
                $list = array();
            }
        }else{
            $list = array();
        }

        return parent::indexAction($list);
    }

    public function companyAction(){
        //Perfis Pai que podem acessar essas pessoas
        $allowed_profiles = array('administrator');

        $allowed = $this->allowed($allowed_profiles);

        $profile_key = "company";

        $this->_listView['title'] = "Empresas";
        $this->_listView['controller'] = $profile_key;
        $em = $this->getEm();

        if($allowed){
            $list = $em->getRepository('Register\Entity\Person')->getByProfile($profile_key);

            if(!$list){
                $list = array();
            }
        }else{
            $list = array();
        }

        return parent::indexAction($list);
    }

    public function employeeAction(){
        $allowed_profiles = array('administrator','company');

        $allowed = $this->allowed($allowed_profiles);

        $profile_key = "employee";

        $this->_listView['title'] = "Funcionários";
        $this->_listView['controller'] = $profile_key;
        $em = $this->getEm();

        if($allowed){
            $list = $em->getRepository('Register\Entity\Person')->getByProfile($profile_key,$this->getLogin()->getCompany());

            if(!$list){
                $list = array();
            }
        }else{
            $list = array();
        }

        return parent::indexAction($list);
    }

    public function customerAction(){
        $allowed_profiles = array('administrator','company','customer');

        $allowed = $this->allowed($allowed_profiles);

        $profile_key = "customer";

        $this->_listView['title'] = "Clientes";
        $this->_listView['controller'] = $profile_key;
        $em = $this->getEm();

        if($allowed){
            $list = $em->getRepository('Register\Entity\Person')->getByProfile($profile_key,$this->getLogin()->getCompany());

            if(!$list){
                $list = array();
            }
        }else{
            $list = array();
        }

        return parent::indexAction($list);
    }

    public function editAction($request = null)
    {
        $request = $this->getRequest();
        $db_login = $this->getEm()->getRepository('Register\Entity\Person')->findOneById($this->getLogin());
        $redirect = null;
        if($request->isPost()){

            $data = $request->getPost();
            $data_arr = $data->toArray();

            if($db_login->getCompany() instanceof Person)
            {
                $data_arr['company'] = $db_login->getCompany();
            }else{
                if($db_login->hasThisProfile('company')){
                    $data_arr['company'] = null;
                }
            }

            $data->fromArray($data_arr);

            $request->setPost($data);

            if(isset($data_arr['profile'])) {
                $redirect = $this->redirect()->toRoute($data_arr['profile'] . '/default', array('controller' => $this->controller, 'action' => $data_arr['action']));
            }
        }

        return parent::editAction($request,null,$redirect); // TODO: Change the autogenerated stub
    }

    public function newAction($request = null)
    {
        $request = $this->getRequest();
        $db_login = $this->getEm()->getRepository('Register\Entity\Person')->findOneById($this->getLogin());
        $redirect = null;
        if($request->isPost()){
            $data = $request->getPost();
            $data_arr = $data->toArray();

            if($db_login->getCompany() instanceof Person)
            {
                $data_arr['company'] = $db_login->getCompany();
            }else{
                if($db_login->hasThisProfile('company')){
                    $data_arr['company'] = $db_login->getId();
                }
            }

            $data->fromArray($data_arr);

            $request->setPost($data);

            if(isset($data_arr['profile']))
            {

                $redirect = $this->redirect()->toRoute($data_arr['profile'].'/default',array('controller' => $this->controller,'action' => $data_arr['action']));
            }

        }

        return parent::newAction($request,null,$redirect); // TODO: Change the autogenerated stub
    }

    public function profileAction(){
        $em = $this->getEm();
        $person = $em->getRepository('Register\Entity\Person')->findOneById($this->params()->fromRoute('id'));
        $personProfiles = $em->getRepository('Register\Entity\PersonProfile')->findBy(array('person'=>$person));

        if(isset($personProfiles)){
            foreach ($personProfiles as $personProfile){
                $personprofiles[] = $personProfile->getProfile();
            }
        }

        $profiles = $em->getRepository('Register\Entity\Profile')->findAll();

        $request = $this->getRequest();

        if($request->isPost()){
            $post = $request->getPost()->toArray();

            #Retirar todas as permissões
            $permissoes = $this->em->getRepository('Register\Entity\PersonProfile')->findBy(array('person'=>$person));
            
            foreach($permissoes as $permissao){
                $this->em->remove($permissao);
                $this->em->flush();
            }

            if(!empty($post['profiles'])) {
                foreach ($post['profiles'] as $perfilId) {
                    $profile = $em->getRepository('Register\Entity\Profile')->findOneById($perfilId);

                    $personProfile = $this->em->getRepository('Register\Entity\PersonProfile')->findOneBy(array('profile' => $profile, 'person' => $person));

                    if ($personProfile == null) {
                        $personProfile = new PersonProfile();
                        $personProfile->setProfile($profile);
                        $personProfile->setPerson($person);

                        $this->em->persist($personProfile);
                        $this->em->flush();
                    }
                }
            }

            $this->flashmessenger()->addSuccessMessage("Registro salvo com sucesso!");
            return $this->redirect()->toRoute('person/default',array('controller'=>'person'));
        }

        return new ViewModel(array(
            'person'=>$person,
            'profiles'=>$profiles,
            'personProfiles'=>$personProfiles
        ));
    }

    public function activeAction(){
        /**
         * @var Person $person
         */
        $person = $this->getEm()->getRepository('Register\Entity\Person')->findOneById($this->params()->fromRoute('id'));
        $activateKey = $person->getActivationKey();
    
        $personService = $this->getServiceLocator()->get('Register\Service\Person');

        $result = $personService->activate($activateKey);
        //Result quando tem o valor é um usuario
        if($result){
            $this->flashmessenger()->addSuccessMessage("Usuário ativado com sucesso!");
            return $this->redirect()->toRoute('admin/default',array('controller'=>'person'));
    
        }else{
            $this->flashmessenger()->addErrorMessage("Houve um erro na ativação do usuário");
            return $this->redirect()->toRoute('admin/default',array('controller'=>'person'));
        }
    }
    
    public function deactiveAction(){
        /**
         * @var Person $person
         */
        $person = $this->getEm()->getRepository('Register\Entity\Person')->findOneById($this->params()->fromRoute('id'));
        $person->setActive(null);
        $this->em->persist($person);
        $this->em->flush();
    
        $this->flashmessenger()->addMessage("Usuário foi desativado com sucesso!");
        return $this->redirect()->toRoute('admin/default',array('controller'=>'person'));
    }

    public function allowed($allowed_profiles)
    {
        /**
         * @var Person $db_login
         * @var PersonProfile $personProfile
         * @var Profile $db_profile
         */
        $db_login = $this->getLogin();

        if($db_login->getAdmin())
        {
            return true;
        }

        $personProfiles = $db_login->getPersonProfiles()->getValues();

        if(!empty($personProfiles)){
            foreach($personProfiles as $personProfile)
            {
                $db_profile = $personProfile->getProfile();

                if(in_array($db_profile->getChave(),$allowed_profiles))
                {
                    return true;
                }

            }
        }

        return false;
    }
}
